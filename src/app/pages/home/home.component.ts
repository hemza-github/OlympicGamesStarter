import { Component, OnInit, OnDestroy } from '@angular/core'; // Import des hooks pour g√©rer le cycle de vie
import { OlympicService } from '../../core/services/olympic.service'; // Service pour r√©cup√©rer les donn√©es des Jeux Olympiques
import { Olympic } from '../../core/models/Olympic'; // Mod√®le des donn√©es des Olympiques
import { Chart, registerables } from 'chart.js'; // Biblioth√®que Chart.js pour les graphiques
import { Router } from '@angular/router'; // Service pour la navigation
import { Statistics } from '../../core/models/Statistics'; // Mod√®le pour les statistiques

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss'],
})
export class HomeComponent implements OnInit, OnDestroy {
  // ---- Propri√©t√©s ----

  // Statistiques dynamiques
  public nombreDeJO: number = 0; // Nombre total d'√©ditions des JO
  public nombreDePays: number = 0; // Nombre total de pays ayant particip√©
  public olympicsData: Olympic[] = []; // Donn√©es des JO r√©cup√©r√©es

  // Liste des statistiques dynamiques pour l'affichage
  public homeStats: Statistics[] = [];

  // R√©f√©rence au graphique pour faciliter sa destruction
  private chart!: Chart;

  // Liste des IDs valides pour naviguer vers les d√©tails
  private validIds: number[] = [];

  constructor(
    private olympicService: OlympicService, // Injection du service pour r√©cup√©rer les donn√©es
    private router: Router // Service pour la navigation
  ) {
    Chart.register(...registerables); // Enregistrement des composants n√©cessaires de Chart.js
  }

  // ---- M√©thodes du cycle de vie ----

  /**
   * Hook appel√© √† l'initialisation du composant.
   * Charge les donn√©es des JO et initialise les statistiques.
   */
  ngOnInit(): void {
    this.fetchOlympicsData(); // R√©cup√©ration des donn√©es
  }

  /**
   * Hook appel√© avant la destruction du composant.
   * Utilis√© pour nettoyer les ressources.
   */
  ngOnDestroy(): void {
    if (this.chart) {
      this.chart.destroy(); // D√©truit le graphique pour √©viter les fuites de m√©moire
    }
  }

  // ---- M√©thodes principales ----

  /**
   * R√©cup√®re les donn√©es des JO via le service et met √† jour les statistiques.
   */
  private fetchOlympicsData(): void {
    this.olympicService.getOlympicsData().subscribe((data) => {
      this.olympicsData = data; // Stocke les donn√©es r√©cup√©r√©es
      this.nombreDePays = this.olympicsData.length; // Nombre total de pays

      // Calcul du nombre unique d'√©ditions des JO
      const years = new Set<number>();
      this.olympicsData.forEach((olympic) => {
        olympic.participations.forEach((participation) =>
          years.add(participation.year)
        );
      });
      this.nombreDeJO = years.size; // Nombre total d'√©ditions des JO

      // Mise √† jour des statistiques dynamiques
      this.homeStats = [
        { label: 'Nombre de JO', value: this.nombreDeJO },
        { label: 'Nombre de Pays', value: this.nombreDePays },
      ];

      // Initialisation des IDs valides pour la navigation
      this.initializeValidIds();

      // Cr√©ation du graphique avec les donn√©es
      this.initializeChart();
    });
  }

  /**
   * Initialise la liste des IDs valides pour la navigation.
   */
  private initializeValidIds(): void {
    this.validIds = this.olympicsData.map((olympic) => olympic.id); // Extrait les IDs des donn√©es r√©cup√©r√©es
  }

  /**
   * Initialise le graphique des m√©dailles par pays.
   */
  private initializeChart(): void {
    const labels = this.olympicsData.map((olympic) => olympic.country); // R√©cup√®re les noms des pays
    const dataValues = this.olympicsData.map((olympic) =>
      olympic.participations.reduce((total, p) => total + p.medalsCount, 0)
    ); // Calcule le total des m√©dailles par pays

    this.chart = new Chart('pieChart', {
      type: 'pie', // Type de graphique "pie" (camembert)
      data: {
        labels: labels, // Labels pour l'axe X
        datasets: [
          {
            label: 'Total des m√©dailles', // Titre du graphique
            data: dataValues, // Donn√©es √† afficher
            backgroundColor: [
              '#956065',
              '#B8CBE7',
              '#89A1DB',
              '#793D52',
              '#9780A1',
            ], // Couleurs des sections
          },
        ],
      },
      options: {
        responsive: true, // Rend le graphique responsive
        maintainAspectRatio: false, // Permet d'ajuster la taille au conteneur
        plugins: {
          tooltip: {
            callbacks: {
              title: (tooltipItems) => {
                const country = tooltipItems[0].label || '';
                return 'üèÖ ' + country; // Affiche un emoji avec le nom du pays
              },
              label: (context) => {
                const value = context.parsed;
                return `${value}`; // Affiche la valeur directement
              },
            },
          },
          legend: {
            display: true, // Affiche la l√©gende
            position: 'top', // Positionne la l√©gende en haut
          },
        },
        onClick: (event, elements) => {
          if (elements.length > 0) {
            const index = elements[0].index; // R√©cup√®re l'index du pays s√©lectionn√©
            const selectedId = this.olympicsData[index].id; // R√©cup√®re l'ID du pays
            if (this.isValidId(selectedId)) {
              this.navigateToDetail(selectedId); // Navigation vers les d√©tails du pays s√©lectionn√©
            } else {
              this.router.navigate(['/not-found']); // Redirige si l'ID est invalide
            }
          }
        },
      },
    });
  }

  /**
   * V√©rifie si un ID est valide pour la navigation.
   * @param id - ID du pays √† v√©rifier
   * @returns `true` si l'ID est valide, `false` sinon
   */
  private isValidId(id: number): boolean {
    return this.validIds.includes(id); // V√©rifie la validit√© de l'ID
  }

  /**
   * Navigue vers la page des d√©tails du pays s√©lectionn√©.
   * @param id - ID du pays s√©lectionn√©
   */
  private navigateToDetail(id: number): void {
    this.router.navigate(['/detail', id]); // Redirige vers la route /detail avec l'ID sp√©cifi√©
  }
}
